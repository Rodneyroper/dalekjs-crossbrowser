{
  "name": "appium",
  "description": "Automation for Apps.",
  "tags": [
    "automation",
    "javascript"
  ],
  "version": "0.9.1",
  "author": {
    "name": "appium-discuss@googlegroups.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/appium/appium.git"
  },
  "bugs": {
    "url": "https://github.com/appium/appium/issues"
  },
  "engines": [
    "node"
  ],
  "main": "./server.js",
  "bin": {
    "appium": "./app/bin.js",
    "instruments_client": "./instruments/client_bin.js",
    "authorize_ios": "./app/authorize.js"
  },
  "directories": {
    "lib": "./app",
    "doc": "./docs"
  },
  "dependencies": {
    "underscore": "~1.4.3",
    "colors": "~0.6.0-1",
    "express": "~3.0.6",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.6",
    "argparse": "~0.1.10",
    "path": "~0.4.9",
    "rimraf": "~2.1.1",
    "uuid-js": "~0.7.4",
    "temp": "~0.5.0",
    "winston": "~0.6.2",
    "request": "~2.12.0",
    "bplist-parser": "~0.0.4",
    "plist": "~0.4.1",
    "bufferpack": "0.0.6",
    "bplist-creator": "~0.0.2",
    "node-uuid": "~1.4.0",
    "underscore.string": "~2.3.1",
    "glob": "~3.1.20",
    "unzip": "~0.1.1",
    "ncp": "~0.4.2",
    "swig": "~0.13.5",
    "async": "~0.2.6",
    "mkdirp": "~0.3.5",
    "xml2js": "~0.2.6",
    "difflib": "~0.2.4",
    "prompt": "~0.2.9",
    "binary-cookies": "~0.1.1",
    "namp": "~0.2.25",
    "node-idevice": "~0.1.2",
    "win-spawn": "~1.1.1",
    "adm-zip": "~0.4.3",
    "ws": "0.4.25",
    "socket.io": "~0.9.14",
    "through": "~2.3.4"
  },
  "scripts": {
    "test": "grunt travis",
    "start": "node server.js"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "should": "~1.2.1",
    "underscore-cli": "~0.2.17",
    "wd": "~0.1.4",
    "yiewd": "~0.0.15",
    "monocle-js": "~0.1.4",
    "assert": "~0.4.9",
    "grunt-mocha-test": "~0.2.0",
    "grunt-contrib-jshint": "~0.1.1",
    "saucelabs": "~0.0.7",
    "socket.io-client": "~0.9.11",
    "socks": "~0.0.1"
  },
  "contributors": [
    {
      "name": "Authors ordered by first contribution"
    },
    {
      "name": "Dan Cuellar",
      "email": "dancuellar@me.com"
    },
    {
      "name": "E. James Infusino",
      "email": "jinfusino@gmail.com"
    },
    {
      "name": "Jason Huggins",
      "email": "hugs@saucelabs.com"
    },
    {
      "name": "Jason Carr",
      "email": "jcarr@saucelabs.com"
    },
    {
      "name": "Jayme Deffenbaugh",
      "email": "jdeffenbaugh@me.com"
    },
    {
      "name": "Roman Salvador",
      "email": "roman.salvador@gmail.com"
    },
    {
      "name": "Luke Inman-Semerau",
      "email": "luke.semerau@gmail.com"
    },
    {
      "name": "Pradeep Bishnoi",
      "email": "pradeepbishnoi@gmail.com"
    },
    {
      "name": "Charles Nowacek",
      "email": "charlie.nowacek@gmail.com"
    },
    {
      "name": "Jayakumar Chinnappan",
      "email": "jayakumareee21@gmail.com"
    },
    {
      "name": "Robin Keller",
      "email": "robinthekeller@gmail.com"
    },
    {
      "name": "Adam Christian",
      "email": "adam.christian@gmail.com"
    },
    {
      "name": "Jonathan Lipps",
      "email": "jlipps@gmail.com"
    },
    {
      "name": "Sebastian Tiedtke",
      "email": "sebastiantiedtke@gmail.com"
    },
    {
      "name": "Jeremy Avnet"
    },
    {
      "name": "Bernard Kobos",
      "email": "bkobos@extensa.pl"
    },
    {
      "name": "Santiago Suarez Ordo√±ez",
      "email": "santiycr@gmail.com"
    },
    {
      "name": "Joe Mathes"
    }
  ],
  "readme": "Appium\n=========\n\n[![NPM version](https://badge.fury.io/js/appium.png)](https://npmjs.org/package/appium)\n[![Build Status](https://api.travis-ci.org/appium/appium.png?branch=master)](https://travis-ci.org/appium/appium)\n\nAppium is an open source, cross-platform test automation tool for native and\nhybrid mobile apps. It supports iOS, Android, and FirefoxOS platforms. Appium\ndrives Apple's UIAutomation library and Android's UiAutomator framework (for\nnewer platforms) using Selenium's WebDriver JSON wire protocol. Appium's iOS\nsupport is based on [Dan Cuellar's](http://github.com/penguinho) work on iOS\nAuto. Appium also comes bundled with\n[Selendroid](http://github.com/DominikDary/selendroid) for testing older\nAndroid platforms.\n\nTesting with Appium has two big benefits:\n\n1.  You don't have to recompile your app or modify it in any way, due\n    to use of standard automation APIs on all platforms.\n\n2.  You can write tests with your favorite dev tools using Java,\n    Objective-C, JavaScript, PHP, Python, Ruby, C#, Clojure, or Perl with the\n    Selenium WebDriver API and language-specific client libraries. You can use\n    any testing framework. If you use Apple's UIAutomation library without Appium\n    you can only write tests using JavaScript and you can only run tests\n    through the Instruments application. Similarly, with Google's UiAutomator\n    you can only write tests in Java. Appium opens up the possibility of true\n    cross-platform native mobile automation. Finally!\n\nRequirements\n------------\n\nGeneral:\n\n* OS X is required for iOS automation\n  * Mac OS X 10.7 or higher, 10.8.4 recommended\n* Android works on OS X and Linux. Support for Windows is in \"beta\"\n* Node and npm (brew install node) (Node must be &gt;= v0.8)\n\nFor iOS automation:\n\n* XCode\n* Apple Developer Tools (iPhone simulator SDK, command line tools)\n\nFor Android automation:\n\n* Android SDK API &gt;= 17 (Additional features require 18)\n\nUser Quick Start\n------------\nOption 1: Use Appium.app:\n\n* Download the Appium.app [dmg](https://bitbucket.org/appium/appium.app/downloads/appium.dmg)\n* Run Appium.app then run a test using your favorite language / framework\n\nOption 2: Run Appium from the command line using Node:\n\n    mkdir appium-test && cd appium-test\n    npm install -g appium  # might have to do this with sudo\n    sudo authorize_ios # enable developer use of iOS sim\n    npm install wd\n    curl -O https://raw.github.com/appium/appium/master/sample-code/examples/node/simplest.js\n    appium &\n    node simplest.js\n\nSee the next section for links on how to make sure your system is set up to run Appium tests.\n\nExample Tests: [Node.js](https://github.com/appium/appium/tree/master/sample-code/examples/node) | [Python](https://github.com/appium/appium/tree/master/sample-code/examples/python) | [PHP](https://github.com/appium/appium/tree/master/sample-code/examples/php) | [Ruby](https://github.com/appium/appium/tree/master/sample-code/examples/ruby) | [Java](https://github.com/appium/appium/tree/master/sample-code/examples/java)\n\nTroubleshooting\n---------------\n\nWe put together a [troubleshooting guide](https://github.com/appium/appium/blob/master/docs/troubleshooting.md). Please have a look here first if you run into any problems. It contains instructions for checking a lot of common errors and how to get in touch with the community if you're stumped.\n\nWrite Tests for Your Apps with Appium\n-------------------\nWe support a sub-set of the [Selenium WebDriver JSON Wire Protocol](https://github.com/appium/appium/wiki/JSON-Wire-Protocol:-Supported-Methods).\n\nYou find elements by using a sub-set of WebDriver's element-finding strategies. See [finding elements](https://github.com/appium/appium/blob/master/docs/finding-elements.md) for detailed information.\n\nWe also have several extensions to the JSON Wire Protocol for [automating\nmobile gestures](https://github.com/appium/appium/blob/master/docs/gestures.md)\nlike tap, flick, and swipe.\n\nYou can also automate web views in hybrid apps! See the [hybrid app\nguide](https://github.com/appium/appium/blob/master/docs/hybrid.md)\n\nWe support Android and iOS platforms side-by-side:\n\n* [Set up your system for Appium iOS support](https://github.com/appium/appium/blob/master/docs/running-on-osx.md#ios)\n* [Set up your system for Appium Android support](https://github.com/appium/appium/blob/master/docs/running-on-osx.md#android)\n* [Set up your system for Android support on linux](https://github.com/appium/appium/blob/master/docs/running-on-linux.md#android)\n* [Prepare your app for an iOS test](https://github.com/appium/appium/blob/master/docs/running-tests.md#prep-ios)\n* [Prepare your app for an Android test](https://github.com/appium/appium/blob/master/docs/running-tests.md#preparing-your-app-for-test-android)\n* [Run an iOS test](https://github.com/appium/appium/blob/master/docs/running-tests.md#run-ios)\n* [Run an Android test](https://github.com/appium/appium/blob/master/docs/running-tests.md#android-ios)\n* [Getting started with Appium and Ruby on OS X](https://github.com/appium/ruby_console/blob/master/osx.md)\n\nFor the full list of Appium doc pages, visit [this directory](https://github.com/appium/appium/blob/master/docs/).\n\n- - -\n\nHacking with Appium\n------------\nInstall [node.js](http://nodejs.org/) (includes npm, the node.js package manager).\nThe recommended way to install node is `brew install node`. Node [installed by\nbrew](http://mxcl.github.io/homebrew/) will not require sudo for npm commands.\n\nFork the Appium repo ( [https://github.com/appium/appium](https://github.com/appium/appium) ), then clone your fork.\n\nFrom your local repo's command prompt, install these packages using the\nfollowing commands (if you didn't install node using homebrew, you might have\nto run npm with sudo privileges):\n\n    npm install -g mocha\n    npm install -g grunt-cli\n    ./reset.sh --dev\n\nThe first two commands install test and build tools (sudo may not be necessary\nif you installed node.js via Homebrew). The third command installs all app\ndependencies, builds supporting binaries and test apps. `reset.sh` is also the\nrecommended command to run after pulling changes from master. At this point,\nyou're able to star the Appium server (see below for examples of various flags\nyou can pass in):\n\n    node server.js\n\nHacking with Appium (iOS)\n--------------\n\n(First, have a look at [setting up your system for Appium iOS support](docs/running-on-osx.md#ios).)\n\nTo avoid a security dialog that may appear when launching your iOS apps you'll\nhave to modify your `/etc/authorization` file in one of two ways:\n\n1.  Manually modify the element following &lt;allow-root&gt; under\n    &lt;key&gt;system.privilege.taskport&lt;/key&gt; in your\n    `/etc/authorization` file to &lt;true/&gt;.\n\n2.  Run the following grunt command which automatically modifies your\n    `/etc/authorization` file for you:\n\n        sudo grunt authorize\n\nAt this point, you can simply run:\n\n    ./reset.sh --ios --dev\n\nHacking with Appium (Android)\n----------------\n\n(First, have a look at setting up your system for Appium Android support ([linux](docs/running-on-linux.md), [osx](docs/running-on-osx.md#android) or [windows](docs/running-on-windows.md)).)\n\nNow, you can simply run:\n\n    ./reset.sh --android --dev\n\nIf you want to use [Selendroid](http://github.com/DominikDary/selendroid) for older apps:\n\n    ./reset.sh --selendroid --dev\n\nMake sure you have one and only one Android emulator or device running, e.g.\nby running this command in another process (assuming the `emulator` command is\non your path):\n\n    emulator -avd <MyAvdName>\n\nMaking sure you're up to date\n-----------\nSince we use dev versions of some packages, it often becomes necessary to\ninstall new NPM packages or update various things. There's a handy shell script\nto do all this for all platforms (the `--dev` flag gets dev npm dependencies\nand test applications used in the Appium test suite):\n\n    ./reset.sh --dev\n\nOr you can run reset for individual platforms only:\n\n    ./reset.sh --ios --dev\n    ./reset.sh --android --dev\n    ./reset.sh --selendroid --dev\n\nRunning Tests\n-----------\nOnce, your system is set up and your code is up to date, you can run various\nkinds of tests:\n\n    grunt android\n    grunt ios\n    grunt selendroid\n    grunt firefoxos\n    grunt unit\n\nOr you can run all tests:\n\n    grunt test\n\nBefore committing code, please run grunt to execute some basic tests and check\nyour changes against code quality standards:\n\n    grunt\n    > Running \"lint:all\" (lint) task\n    > Lint free.\n    > Done, without errors.\n\nDig in deeper to Appium dev\n-----------\n### Advanced grunt\nLike the power of automating dev tasks? Check out the [Appium grunt\ntasks](https://github.com/appium/appium/blob/master/docs/grunt.md) available to\nhelp with building apps, installing apps, generating docs, etc...\n\n### Running individual tests\n\nIf you have an Appium server listening, you can run individual test files using\nMocha, for example:\n\n    mocha -t 60000 -R spec test/functional/testapp/simple.js\n\nOr individual tests (e.g., a test with the word \"alert\" in the name):\n\n    mocha -t 60000 -R spec --grep \"alert\" test/functional/apidemos\n\nYou can also run all of appium's tests this way. In one window, `node\nserver.js` In another window, sequentially (waiting for each to pass, making\nsure emulator is up, etc...):\n\n`alias mm=\"mocha -t 60000 -R spec\"`\n\n```\nmm test/functional/apidemos\nmm test/functional/prefs\nmm test/functional/safari\nmm test/functional/selendroid\nmm test/functional/testapp\nmm test/functional/uicatalog\nmm test/functional/webview\n```\n\nFor convenience, there's a `test.sh` script which runs just these tests which\nit is important to pass before publishing appium.\n\n### Advanced Appium server flags\n\nDo you like getting close to the metal? Or are you trying to launch an Appium\nserver from a script with a custom app? If so you can start Appium without\ngrunt from the command line with an app or without an app, among other things:\n\n    node server.js // launch Appium server without app\n    node server.js --app /absolute/path/to/app  // launch Appium server with app\n    node server.js --launch // pre-launch the app when appium loads\n    node server.js --log /my/appium.log // log to file instead of stdout\n    node server.js --quiet // don't log verbose output\n\n(See\n[the server documentation](https://github.com/appium/appium/blob/master/docs/server-args.md) for\nall CLI arguments.)\n\n\nUsing with a [Tapster](https://github.com/hugs/tapsterbot) and other robots\n-----------\n\nCheck out the [Appium Robots](https://github.com/appium/robots) project\n\nContributing\n------------\nFork the project, make a change, and send a pull request!\n\nOh and please have a look at our [Style Guide](https://github.com/appium/appium/blob/master/docs/style-guide.md) before getting to work.\n\nProject Credits & Inspiration\n------------\nThe open source community has made this project possible, please add missing projects to the list.\n\n[All the OSS code contributing to Appium](https://github.com/appium/appium/blob/master/docs/credits.md)\n\nMailing List\n-----------\nAnnouncements and debates often take place on the [Discussion Group](https://groups.google.com/d/forum/appium-discuss), be sure to sign up!\n",
  "readmeFilename": "README.md",
  "_id": "appium@0.9.1",
  "dist": {
    "shasum": "bb36bcf4f92a0f1e87f5bdaa3ec9244f963add7c"
  },
  "_from": "appium@~0.9.0",
  "_resolved": "https://registry.npmjs.org/appium/-/appium-0.9.1.tgz"
}
